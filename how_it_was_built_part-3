- As an API publisher/developer one needs to establish a contracts
with their users. The contract dictates the workings of the API and
specifies what and how resoirces are served by the API's endpoints.
-Every breaking change for example should be published in a new version
-In this section we implement versioning using `advanced constraints`
provided by rails routing. The said constraints are used to dictate
the controller that handles the incoming requests.
-Advanced constraints in rails routing require that the target object
is able to respond to `matches?` (http://guides.rubyonrails.org/routing.html#advanced-constraints)

Create class ApiVersion
    - Class ApiVersion checks the API version from the request headers
    and routes the request to the appropriate header.
    - The class goes in app/lib since it's non-domain specific
    touch app/lib/api_version.rb

Define the ApiVersion class
    - Content negotiation is a mechanism that enables serving of different versions
    or representations of a resource suing the same URI
    - ApiVersion provides content negotiation, whereby, the client tells the server
    the media type it(the client) understands
    - The Media Type Specification supports defining a custom media types using the
    vendor tree notation
        application/vnd.example.resource+json
    - eat-in defines the media type below to enable clients to
    choose the version they support
        application/vnd.restaurants.{version_number}.json
    https://en.wikipedia.org/wiki/Content_negotiation
    https://tools.ietf.org/html/rfc6838#section-3.2
    https://en.wikipedia.org/wiki/Media_type#Vendor_tree

    https://github.com/alex-magana/eat-in/commit/07d9b552ba370437583d73ee568f6c7a5e77337c
    https://github.com/alex-magana/eat-in/pull/13/files

Modify routing to support versioning
    - Using version numbers in a URI is considered an anti-pattern
    - We use scope, module, to namespace controllers.
    - This averts the need to use version sumbers in the URI
    https://github.com/alex-magana/eat-in/commit/ae148846e76b6ebdb70b19d322f205f65b667f30
    https://github.com/alex-magana/eat-in/pull/13/files

Move restaurants and items controllers to the v1 namespace.
    mkdir app/controllers/v1
    mv app/controllers/{restaurants_controller.rb,items_controller.rb} app/controllers/v1

Define restaurants and items controllers under the v1 namespace
    https://github.com/alex-magana/eat-in/commit/edb5259e49c1d8eef2144ea669dee668f82af748
    https://github.com/alex-magana/eat-in/pull/13/files

Test the /restaurants routes
    curl -X GET http://localhost:3000
    curl -X POST -d '{"email": "foo@bar.com", "password": "foobar"}' \
        http://localhost:3000/auth/login
    curl -X GET -H 'Accept: application/vnd.restaurants.v1+json' \
        -H 'Authorization: ey...AWH3FNTd3T0jMB7HnLw2bYQbK0g' \
        http://localhost:3000/restaurants
    # Attempting to access a non-existent version should resolve to the default version
    curl -X GET -H 'Accept: application/vnd.restaurants.v2+json' \
        -H 'Authorization: ey...AWH3FNTd3T0jMB7HnLw2bYQbK0' \
        http://localhost:3000/restaurants

Add v2 restaurants controller for testing
    rails g controller v2/restaurants

Define the v2 namespace
    https://github.com/alex-magana/eat-in/commit/a1abb2004620e3c2a815020c0d2917c012ee80b4
    https://github.com/alex-magana/eat-in/pull/13/files

Define the test controller with a dummy response
    https://github.com/alex-magana/eat-in/commit/d9333de432f8a68f1d8b7db730baf5abd857cf45
    https://github.com/alex-magana/eat-in/pull/13/files

Test the 2 different versions
    curl -X GET -H 'Accept: application/vnd.restaurants.v1+json' \
        -H 'Authorization: ey...AWH3FNTd3T0jMB7HnLw2bYQbK0g' \
        http://localhost:3000/restaurants
    curl -X GET -H 'Accept: application/vnd.restaurants.v2+json' \
        -H 'Authorization: ey...AWH3FNTd3T0jMB7HnLw2bYQbK0' \
        http://localhost:3000/restaurants

Add gem, active_model_serializers, to provide a serializer for model, Restaurant.
    https://github.com/alex-magana/eat-in/commit/75dc513fae70243e3050cf8da1ab8e666a491b47
    https://github.com/alex-magana/eat-in/pull/14/files
    https://github.com/rails-api/active_model_serializers

bundle install

Generate a serializer, restaurant.
    rails g serializer restaurant

Define the Restaurant serializer
    https://github.com/alex-magana/eat-in/commit/136b39d3970acfc5cf89e19b13dcb3af18759f03
    https://github.com/alex-magana/eat-in/pull/14/files

Test the routes
    curl -X POST -d '{"email": "foo@bar.com", "password": "foobar"}' \
        http://localhost:3000/auth/login
    curl -X POST -H 'Accept: application/vnd.restaurants.v1+json' \
        -H 'Authorization: ey...AWH3FNTd3T0jMB7HnLw2bYQbK0g' \
        -d '{"name": "Curry King", "opening_time": "10:00", "closing_time": "23:00", "created_by": 1}' \
        http://localhost:3000/restaurants
    curl -X POST -H 'Accept: application/vnd.restaurants.v1+json' \
        -H 'Authorization: ey...AWH3FNTd3T0jMB7HnLw2bYQbK0g' \
        -d '{"name": "CJ's", "opening_time": "10:00", "closing_time": "23:00", "created_by": 1}' \
        http://localhost:3000/restaurants
    curl -X GET -H 'Accept: application/vnd.restaurants.v1+json' \
        -H 'Authorization: ey...AWH3FNTd3T0jMB7HnLw2bYQbK0g' \
        http://localhost:3000/restaurants

Add gem, will_paginate, to provide pagination
    [link goes here]

bundle install

Modify RestaurantsController to support pagination
    [link goes here]

Define seed data for testing the endpoints
    [link goes here]

Populate test db
    rake db:seed

Test the endpoints
    curl -X POST -d '{"email": "foo@bar.com", "password": "foobar"}' \
        http://localhost:3000/auth/login
    curl -X GET -H 'Accept: application/vnd.restaurants.v1+json' \
        -H 'Authorization: ey...AWH3FNTd3T0jMB7HnLw2bYQbK0g' \
        -d '{"page": 1}' \
        http://localhost:3000/restaurants
    curl -X GET -H 'Accept: application/vnd.restaurants.v1+json' \
        -H 'Authorization: ey...AWH3FNTd3T0jMB7HnLw2bYQbK0g' \
        -d '{"page": 2}' \
        http://localhost:3000/restaurants